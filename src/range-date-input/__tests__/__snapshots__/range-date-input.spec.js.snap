// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<RangeDateInput> when blurring has proper markup 1`] = `
<ClickOutside
  onClickOutside={[Function]}
>
  <section
    className="DateInput-section"
  >
    <Row
      bsClass="row"
      componentClass="div"
    >
      <Col
        bsClass="col"
        className="DateInput-container in-range dash-after"
        componentClass="div"
        xs={6}
      >
        <input
          className="form-control"
          name="startDateInput"
          onChange={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          placeholder={null}
          type="text"
          value="10/15/2020"
        />
        <Calendar />
      </Col>
      <Col
        bsClass="col"
        className="DateInput-container in-range"
        componentClass="div"
        xs={6}
      >
        <input
          className="form-control"
          name="endDateInput"
          onChange={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          placeholder={null}
          type="text"
          value="10/24/2020"
        />
        <Calendar />
      </Col>
    </Row>
  </section>
</ClickOutside>
`;

exports[`<RangeDateInput> when endFormatter is passed as a prop has proper markup 1`] = `
<ClickOutside
  onClickOutside={[Function]}
>
  <section
    className="DateInput-section"
  >
    <Row
      bsClass="row"
      componentClass="div"
    >
      <Col
        bsClass="col"
        className="DateInput-container in-range dash-after"
        componentClass="div"
        xs={6}
      >
        <input
          className="form-control"
          name="startDateInput"
          onChange={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          placeholder={null}
          type="text"
          value="10/15/2020"
        />
        <Calendar />
      </Col>
      <Col
        bsClass="col"
        className="DateInput-container in-range"
        componentClass="div"
        xs={6}
      >
        <input
          className="form-control"
          name="endDateInput"
          onChange={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          placeholder={null}
          type="text"
          value="Wk start 10/24/2020"
        />
        <Calendar />
      </Col>
    </Row>
  </section>
</ClickOutside>
`;

exports[`<RangeDateInput> when focusing has proper markup 1`] = `
<ClickOutside
  onClickOutside={[Function]}
>
  <section
    className="DateInput-section"
  >
    <Row
      bsClass="row"
      componentClass="div"
    >
      <Col
        bsClass="col"
        className="DateInput-container in-range dash-after"
        componentClass="div"
        xs={6}
      >
        <input
          className="form-control"
          name="startDateInput"
          onChange={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          placeholder={null}
          type="text"
          value="10/15/2020"
        />
        <Calendar />
      </Col>
      <Col
        bsClass="col"
        className="DateInput-container in-range"
        componentClass="div"
        xs={6}
      >
        <input
          className="form-control"
          name="endDateInput"
          onChange={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          placeholder={null}
          type="text"
          value="10/24/2020"
        />
        <Calendar />
      </Col>
    </Row>
    <DayPickerRangeController
      daySize={39}
      enableOutsideDays={false}
      endDate={"2020-10-24T04:00:00.000Z"}
      firstDayOfWeek={null}
      focusedInput="startDate"
      hideKeyboardShortcutsPanel={false}
      initialVisibleMonth={null}
      isDayBlocked={[Function]}
      isDayHighlighted={[Function]}
      isFocused={false}
      isOutsideRange={[Function]}
      isRTL={false}
      keepOpenOnDateSelect={true}
      minimumNights={1}
      monthFormat="MMMM YYYY"
      navNext={<RightPaginationArrow />}
      navPrev={<LeftPaginationArrow />}
      numberOfMonths={2}
      onBlur={[Function]}
      onClose={[Function]}
      onDatesChange={[Function]}
      onFocusChange={[Function]}
      onNextMonthClick={[Function]}
      onOutsideClick={[Function]}
      onPrevMonthClick={[Function]}
      orientation="horizontal"
      phrases={
        Object {
          "calendarLabel": "Calendar",
          "chooseAvailableDate": [Function],
          "chooseAvailableEndDate": [Function],
          "chooseAvailableStartDate": [Function],
          "dateIsUnavailable": [Function],
          "enterKey": "Enter key",
          "escape": "Escape key",
          "hideKeyboardShortcutsPanel": "Close the shortcuts panel",
          "homeEnd": "Home and end keys",
          "jumpToNextMonth": "Move forward to switch to the next month",
          "jumpToPrevMonth": "Move backward to switch to the previous month",
          "keyboardShortcuts": "Keyboard Shortcuts",
          "leftArrowRightArrow": "Right and left arrow keys",
          "moveFocusByOneDay": "Move backward (left) and forward (right) by one day",
          "moveFocusByOneMonth": "Switch months",
          "moveFocusByOneWeek": "Move backward (up) and forward (down) by one week",
          "moveFocustoStartAndEndOfWeek": "Go to the first or last day of a week",
          "openThisPanel": "Open this panel",
          "pageUpPageDown": "page up and page down keys",
          "questionMark": "Question mark",
          "returnFocusToInput": "Return to the date input field",
          "selectFocusedDate": "Select the date in focus",
          "showKeyboardShortcutsPanel": "Open the keyboard shortcuts panel",
          "upArrowDownArrow": "up and down arrow keys",
        }
      }
      renderCalendarInfo={null}
      renderDay={null}
      renderMonth={null}
      showKeyboardShortcuts={false}
      startDate={"2020-10-15T04:00:00.000Z"}
      weekDayFormat="dd"
      withPortal={false}
    />
  </section>
</ClickOutside>
`;

exports[`<RangeDateInput> when rendered with placeholders has proper markup 1`] = `
<ClickOutside
  onClickOutside={[Function]}
>
  <section
    className="DateInput-section"
  >
    <Row
      bsClass="row"
      componentClass="div"
    >
      <Col
        bsClass="col"
        className="DateInput-container in-range dash-after"
        componentClass="div"
        xs={6}
      >
        <input
          className="form-control"
          name="startDateInput"
          onChange={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          placeholder="MM/DD/YYYY"
          type="text"
          value="10/15/2020"
        />
        <Calendar />
      </Col>
      <Col
        bsClass="col"
        className="DateInput-container in-range"
        componentClass="div"
        xs={6}
      >
        <input
          className="form-control"
          name="endDateInput"
          onChange={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          placeholder="MM/DD/YYYY"
          type="text"
          value="10/24/2020"
        />
        <Calendar />
      </Col>
    </Row>
  </section>
</ClickOutside>
`;

exports[`<RangeDateInput> when rendered with required props it has proper markup 1`] = `
<ClickOutside
  onClickOutside={[Function]}
>
  <section
    className="DateInput-section"
  >
    <Row
      bsClass="row"
      componentClass="div"
    >
      <Col
        bsClass="col"
        className="DateInput-container in-range dash-after"
        componentClass="div"
        xs={6}
      >
        <input
          className="form-control"
          name="startDateInput"
          onChange={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          placeholder={null}
          type="text"
          value="10/15/2020"
        />
        <Calendar />
      </Col>
      <Col
        bsClass="col"
        className="DateInput-container in-range"
        componentClass="div"
        xs={6}
      >
        <input
          className="form-control"
          name="endDateInput"
          onChange={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          placeholder={null}
          type="text"
          value="10/24/2020"
        />
        <Calendar />
      </Col>
    </Row>
  </section>
</ClickOutside>
`;

exports[`<RangeDateInput> when startFormatter is passed as a prop has proper markup 1`] = `
<ClickOutside
  onClickOutside={[Function]}
>
  <section
    className="DateInput-section"
  >
    <Row
      bsClass="row"
      componentClass="div"
    >
      <Col
        bsClass="col"
        className="DateInput-container in-range dash-after"
        componentClass="div"
        xs={6}
      >
        <input
          className="form-control"
          name="startDateInput"
          onChange={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          placeholder={null}
          type="text"
          value="Wk start 10/15/2020"
        />
        <Calendar />
      </Col>
      <Col
        bsClass="col"
        className="DateInput-container in-range"
        componentClass="div"
        xs={6}
      >
        <input
          className="form-control"
          name="endDateInput"
          onChange={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          placeholder={null}
          type="text"
          value="10/24/2020"
        />
        <Calendar />
      </Col>
    </Row>
  </section>
</ClickOutside>
`;

exports[`<RangeDateInput> when toggling has proper markup 1`] = `
<ClickOutside
  onClickOutside={[Function]}
>
  <section
    className="DateInput-section"
  >
    <Row
      bsClass="row"
      componentClass="div"
    >
      <Col
        bsClass="col"
        className="DateInput-container in-range dash-after"
        componentClass="div"
        xs={6}
      >
        <input
          className="form-control"
          name="startDateInput"
          onChange={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          placeholder={null}
          type="text"
          value="10/15/2020"
        />
        <Calendar />
      </Col>
      <Col
        bsClass="col"
        className="DateInput-container in-range"
        componentClass="div"
        xs={6}
      >
        <input
          className="form-control"
          name="endDateInput"
          onChange={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          placeholder={null}
          type="text"
          value="10/24/2020"
        />
        <Calendar />
      </Col>
    </Row>
    <DayPickerRangeController
      daySize={39}
      enableOutsideDays={false}
      endDate={"2020-10-24T04:00:00.000Z"}
      firstDayOfWeek={null}
      focusedInput="startDate"
      hideKeyboardShortcutsPanel={false}
      initialVisibleMonth={null}
      isDayBlocked={[Function]}
      isDayHighlighted={[Function]}
      isFocused={false}
      isOutsideRange={[Function]}
      isRTL={false}
      keepOpenOnDateSelect={true}
      minimumNights={1}
      monthFormat="MMMM YYYY"
      navNext={<RightPaginationArrow />}
      navPrev={<LeftPaginationArrow />}
      numberOfMonths={2}
      onBlur={[Function]}
      onClose={[Function]}
      onDatesChange={[Function]}
      onFocusChange={[Function]}
      onNextMonthClick={[Function]}
      onOutsideClick={[Function]}
      onPrevMonthClick={[Function]}
      orientation="horizontal"
      phrases={
        Object {
          "calendarLabel": "Calendar",
          "chooseAvailableDate": [Function],
          "chooseAvailableEndDate": [Function],
          "chooseAvailableStartDate": [Function],
          "dateIsUnavailable": [Function],
          "enterKey": "Enter key",
          "escape": "Escape key",
          "hideKeyboardShortcutsPanel": "Close the shortcuts panel",
          "homeEnd": "Home and end keys",
          "jumpToNextMonth": "Move forward to switch to the next month",
          "jumpToPrevMonth": "Move backward to switch to the previous month",
          "keyboardShortcuts": "Keyboard Shortcuts",
          "leftArrowRightArrow": "Right and left arrow keys",
          "moveFocusByOneDay": "Move backward (left) and forward (right) by one day",
          "moveFocusByOneMonth": "Switch months",
          "moveFocusByOneWeek": "Move backward (up) and forward (down) by one week",
          "moveFocustoStartAndEndOfWeek": "Go to the first or last day of a week",
          "openThisPanel": "Open this panel",
          "pageUpPageDown": "page up and page down keys",
          "questionMark": "Question mark",
          "returnFocusToInput": "Return to the date input field",
          "selectFocusedDate": "Select the date in focus",
          "showKeyboardShortcutsPanel": "Open the keyboard shortcuts panel",
          "upArrowDownArrow": "up and down arrow keys",
        }
      }
      renderCalendarInfo={null}
      renderDay={null}
      renderMonth={null}
      showKeyboardShortcuts={false}
      startDate={"2020-10-15T04:00:00.000Z"}
      weekDayFormat="dd"
      withPortal={false}
    />
  </section>
</ClickOutside>
`;
